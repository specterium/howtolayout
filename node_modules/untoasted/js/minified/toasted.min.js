function generateHeaderFooter(longest,add,headerText,filler){let header=" "+headerText+" ";let footer="";while(header.length<longest+add){header=filler+header+filler}for(let i=0;i<header.length;i++){footer+=filler}return[header,footer]}function getLongestLength(list){let longest=0;for(let i=0;i<list.length;i++){if(list[i].length>longest){longest=list[i].length}}return longest}const toast_defaults={id:null,title:"Toast",content:"This is a toast",buttons:[],onClose:null,onMouseEnter:null,onMouseLeave:null,autoClose:{enabled:true,delay:3e3,showProgress:true,autoAdjust:{enabled:true,onlyWhenDelayTooShort:true,extraTime:0}},closeButton:true,unsafe:false,ignoreWarnings:false,debug:false};function untoasted(options=toast_defaults){let warnings=[];let debug=[];let toast_timeout=null;let toast_id=options.id?options.id:Math.random().toString(36).substring(2,7);if(document.getElementById(toast_id)){let toast_count=document.querySelectorAll(`[id^="${toast_id}"]`).length+1;toast_id+=`_${toast_count}`;warnings.push(`A toast with the id "${options.id}" already exists. The new toast got the id "${toast_id}" instead.`)}for(let key in toast_defaults){if(!options.hasOwnProperty(key)){options[key]=toast_defaults[key]}else if(typeof options[key]==="object"){for(let subkey in toast_defaults[key]){if(!options[key].hasOwnProperty(subkey)){options[key][subkey]=toast_defaults[key][subkey]}}}}console.log("DEBUG: Creating toast with options: ",options);const wrapper=document.querySelector(".toasted-wrapper")||document.createElement("div");wrapper.classList.add("toasted-wrapper");if(!document.getElementById(".toasted-wrapper")){document.body.appendChild(wrapper)}const toast=document.createElement("div");toast.classList.add("toast");toast.id=toast_id;const title=document.createElement("div");title.classList.add("toast-title");title.innerText=options.title;const content=document.createElement("div");content.classList.add("toast-content");content.innerHTML=options.content;const buttons=document.createElement("div");buttons.classList.add("toast-buttons");options.buttons.forEach(button=>{const btn=document.createElement("button");btn.classList.add("toast-button");btn.innerText=button.text;if(button.onClick){btn.addEventListener("click",button.onClick)}buttons.appendChild(btn)});if(options.buttons.length>3){warnings.push("It is not recommended to use more than 3 buttons in a toast.")}if(options.unsafe){warnings.push("Unsafe toasts are not recommended.")}if(options.unsafe&&!options.autoClose.enabled&&!options.closeButton){warnings.push("Unsafe toasts without autoClose or a close button will stay on the screen forever.")}let needed_delay=options.content.split(" ").length/300*175e3;debug.push("This toast will most likely need its reader "+needed_delay+"ms to read it.");if(options.autoClose.autoAdjust.enabled){if(options.autoClose.autoAdjust.onlyWhenDelayTooShort?options.autoClose.delay<needed_delay:true){options.autoClose.delay=needed_delay;if(options.autoClose.autoAdjust.extraTime){options.autoClose.delay+=options.autoClose.autoAdjust.extraTime}let dbg="";if(!options.autoClose.autoAdjust.extraTime){dbg="Adjusted autoClose delay to "+options.autoClose.delay+"ms."}else{dbg=`Adjusted autoClose delay to " + options.autoClose.delay + "ms (containing ${options.autoClose.autoAdjust.extraTime}ms of extraTime).`}debug.push(dbg)}}if(options.autoClose.enabled&&(!options.autoClose.delay||options.autoClose.delay<needed_delay)){warnings.push("The autoClose delay is too short. The toast will disappear before the user can read it.")}toast.appendChild(title);toast.appendChild(content);toast.appendChild(buttons);let leftTime=options.autoClose.delay;let running=true;let progressIntervalDuration=10;if(options.autoClose.enabled){let progressInterval=setInterval(()=>{if(running){if(options.autoClose.showProgress){let progress=toast.querySelector(".toast-progress")||document.createElement("div");progress.classList.add("toast-progress");progress.style.width=`${leftTime/options.autoClose.delay*100}%`;if(!toast.querySelector(".toast-progress")){toast.appendChild(progress)}}if(leftTime<=0||!toast){clearInterval(progressInterval);toast.remove()}console.debug("Running progress bar. Left time: "+leftTime+"ms.");leftTime-=progressIntervalDuration}},progressIntervalDuration)}if(options.closeButton||!options.closeButton&&!options.autoClose.enabled&&!options.unsafe){const close=document.createElement("div");close.classList.add("toast-close");close.innerHTML="&times;";close.addEventListener("click",()=>{wrapper.removeChild(toast);if(options.onClose){options.onClose()}});toast.appendChild(close)}toast.addEventListener("mouseenter",()=>{if(options.autoClose.enabled){running=false}if(options.onMouseEnter){options.onMouseEnter()}});toast.addEventListener("mouseleave",()=>{if(options.autoClose.enabled){running=true}if(options.onMouseLeave){options.onMouseLeave()}});if(window.innerWidth<768){const toasts=wrapper.querySelectorAll(".toast");toasts.forEach(toast=>{toast.remove()})}wrapper.appendChild(toast);if(warnings.length>0&&!options.ignoreWarnings){let headerfooter=generateHeaderFooter(getLongestLength(warnings),30," WARNINGS FOR TOAST WITH ID "+toast_id+" ("+warnings.length+") ","=");console.warn(headerfooter[0]);warnings.forEach(warning=>{console.warn(warning)});console.warn("Reference to the toast: ",toast);console.warn(headerfooter[1])}if(debug.length>0&&options.debug){let headerfooter=generateHeaderFooter(getLongestLength(debug),15," DEBUG FOR TOAST WITH ID "+toast_id+" ("+debug.length+") ","=");console.log(headerfooter[0]);debug.forEach(msg=>{console.log(msg)});console.log("Reference to the toast: ",toast);console.log(headerfooter[1])}return toast}